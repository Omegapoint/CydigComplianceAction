import * as core from '@actions/core';
import * as github from '@actions/github';

export class PentestService {
  public static async getStateOfPentest(pentestDate: { date: string; boardsTag: string }): Promise<void> {
    console.log('Running Pentest Controls');

    if (!pentestDate.date || pentestDate.date === 'date-of-pentest') {
      core.warning('Pentest Date is not set!');
      return;
    }
    core.setOutput('pentestDate', pentestDate.date);

    console.log('Pentest Date is set', pentestDate.date);

    const token = core.getInput('repo-token');
    console.log('Got the token');

    const octokit = github.getOctokit(token);
    console.log('octoKit authenticated');

    const { owner, repo } = github.context.repo;
    console.log(`Owner: ${owner}`);
    console.log(`Repo: ${repo}`);

    console.log('Going to get Pentest tickets from github boards');
    await octokit.rest.projects
      .listCards({
        owner: owner,
        repo: repo,
        column_id: 24,
      })
      .then(async (response) => {
        console.log('Got the cards');
        const projectCards = response.data;
        // const customLabelCards = projectCards.filter((card) => {
        //     return card.note?.includes(pentestDate.boardsTag);
        // });

        const customLabelCards = [];
        console.log('projectCards', projectCards);
        for (const card of projectCards) {
          // Get the associated issue or pull request for the card
          console.log('card', card);
          const contentResponse = await octokit.request(card.content_url);
          console.log('contentResponse', contentResponse);
          if (contentResponse.data.labels.some((label: any) => label.name === pentestDate.boardsTag)) {
            customLabelCards.push(card);
          }
        }

        console.log('customLabelCards', customLabelCards);
        return customLabelCards;
      })
      .catch((error) => {
        core.warning('Error getting cards!');
        console.log('Error: ', error);
      });

    // owner: owner,
    // repo: repo,
    // branch: 'main',
    // }).then((response) => {
    //     console.log("Got the branch protection");
    //     console.log(response.data);
    // }).catch((error) => {
    //     core.warning("Error getting branch protection!");
    //     core.warning("Error: ", error.message);
    // });
  }
}
